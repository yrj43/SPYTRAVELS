{"version":3,"sources":["utils/three.js","assets/a320.glb","components/Plane.js"],"names":["clean","scene","traverse","object","isMesh","geometry","dispose","material","isMaterial","cleanMaterial","Object","keys","value","returnSphericalCoordinates","latitude","longitude","size","radius","width","height","outputRadius","Math","cos","PI","x","y","sin","z","module","exports","Plane","canvasHeight","props","canvasRef","useRef","sceneRef","cameraRef","controlsRef","rendererRef","animationFrameRef","modelRef","viewportSize","useViewportSize","initViewportSize","useEffect","canvas","current","loader","GLTFLoader","WebGLRenderer","alpha","antialias","PerspectiveCamera","position","Scene","setClearColor","setPixelRatio","gammaOutput","gammaFactor","OrbitControls","enableKeys","enablePan","enableZoom","enableDamping","enableRotate","autoRotate","autoRotateSpeed","ambientLight","AmbientLight","dirLight","DirectionalLight","set","add","load","planeModel","gltf","scale","rotation","gsap","to","ease","render","requestAnimationFrame","update","cancelAnimationFrame","domElement","forceContextLoss","setSize","aspect","updateProjectionMatrix","PlaneCanvas","ref","defaultProps","styled"],"mappings":"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","file":"static/js/4.16080015.chunk.js","sourcesContent":["export const clean = scene => {\n  scene.traverse(object => {\n    if (!object.isMesh) return;\n\n    object.geometry.dispose();\n\n    if (object.material.isMaterial) {\n      cleanMaterial(object.material);\n    } else {\n      // an array of materials\n      for (const material of object.material) cleanMaterial(material);\n    }\n  });\n};\n\nconst cleanMaterial = material => {\n  material.dispose();\n\n  // dispose textures\n  for (const key of Object.keys(material)) {\n    const value = material[key];\n    if (value && typeof value === 'object' && 'minFilter' in value) {\n      value.dispose();\n    }\n  }\n};\n\nexport const returnSphericalCoordinates = (latitude, longitude, size, radius) => {\n  latitude = ((latitude - size.width) / size.width) * -180;\n  longitude = ((longitude - size.height) / size.height) * -90;\n\n  const outputRadius = Math.cos(longitude / 180 * Math.PI) * radius;\n  const x = Math.cos(latitude / 180 * Math.PI) * outputRadius;\n  const y = Math.sin(longitude / 180 * Math.PI) * radius;\n  const z = Math.sin(latitude / 180 * Math.PI) * outputRadius;\n\n  return { x, y, z };\n};\n","module.exports = __webpack_public_path__ + \"static/media/a320.999bd52b.glb\";","import React, { useEffect, useRef } from 'react';\nimport styled from 'styled-components/macro';\nimport { Scene, PerspectiveCamera, WebGLRenderer, AmbientLight, DirectionalLight } from 'three';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';\nimport gsap from 'gsap';\nimport { useViewportSize } from 'hooks';\nimport planeModel from 'assets/a320.glb';\nimport { clean } from 'utils/three';\n\nexport default function Plane({ canvasHeight, ...props }) {\n  const canvasRef = useRef();\n  const sceneRef = useRef();\n  const cameraRef = useRef();\n  const controlsRef = useRef();\n  const rendererRef = useRef();\n  const animationFrameRef = useRef();\n  const modelRef = useRef();\n  const viewportSize = useViewportSize();\n  const initViewportSize = useRef(viewportSize);\n\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const { width } = initViewportSize;\n    const loader = new GLTFLoader();\n\n    rendererRef.current = new WebGLRenderer({ canvas, alpha: true, antialias: true });\n    cameraRef.current = new PerspectiveCamera(40, width / canvasHeight, 0.1, 800);\n    cameraRef.current.position.z = 200;\n    sceneRef.current = new Scene();\n    rendererRef.current.setClearColor(0x000000, 0);\n    rendererRef.current.setPixelRatio(2);\n    rendererRef.current.gammaOutput = true;\n    rendererRef.current.gammaFactor = 2.2;\n\n    controlsRef.current = new OrbitControls(cameraRef.current, canvas);\n    controlsRef.current.enableKeys = false;\n    controlsRef.current.enablePan = false;\n    controlsRef.current.enableZoom = false;\n    controlsRef.current.enableDamping = true;\n    controlsRef.current.enableRotate = true;\n    controlsRef.current.autoRotate = true;\n    controlsRef.current.autoRotateSpeed = -0.5;\n\n    const ambientLight = new AmbientLight(0xFFFFFF, 0.8);\n    const dirLight = new DirectionalLight(0xFFFFFF, 0.8);\n    dirLight.position.set(30, 20, 32);\n    sceneRef.current.add(ambientLight);\n    sceneRef.current.add(dirLight);\n\n    const render = () => {\n      animationFrameRef.current = requestAnimationFrame(render);\n      controlsRef.current.update();\n      rendererRef.current.render(sceneRef.current, cameraRef.current);\n    };\n\n    loader.load(planeModel, gltf => {\n      const scale = 0.54;\n      modelRef.current = gltf.scene;\n      sceneRef.current.add(modelRef.current);\n      modelRef.current.scale.x = scale;\n      modelRef.current.scale.y = scale;\n      modelRef.current.scale.z = scale;\n      modelRef.current.rotation.y = 5.2;\n      modelRef.current.position.x = 200;\n      cameraRef.current.position.y = -120;\n      gsap.to(modelRef.current.position, 2, { x: 0, ease: 'power2.out' });\n      gsap.to(cameraRef.current.position, 2, { y: 65, ease: 'power2.out' });\n      render();\n    });\n\n    return () => {\n      cancelAnimationFrame(animationFrameRef.current);\n      clean(sceneRef.current);\n      rendererRef.current.dispose();\n      sceneRef.current.dispose();\n      cameraRef.current = null;\n      rendererRef.current.domElement = null;\n      rendererRef.current.forceContextLoss();\n    };\n  }, [canvasHeight]);\n\n  useEffect(() => {\n    const { width } = viewportSize;\n    rendererRef.current.setSize(width, canvasHeight);\n    cameraRef.current.aspect = width / canvasHeight;\n    cameraRef.current.updateProjectionMatrix();\n  }, [canvasHeight, viewportSize]);\n\n  return (\n    <PlaneCanvas ref={canvasRef} {...props} />\n  );\n}\n\nPlane.defaultProps = {\n  canvasHeight: 300,\n};\n\nconst PlaneCanvas = styled.canvas`\n  display: block;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n\n  &:focus {\n    outline: none;\n  }\n`;\n"],"sourceRoot":""}